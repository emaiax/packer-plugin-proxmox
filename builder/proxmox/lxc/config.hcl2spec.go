// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package proxmoxlxc

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName           *string                       `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType         *string                       `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerCoreVersion         *string                       `mapstructure:"packer_core_version" cty:"packer_core_version" hcl:"packer_core_version"`
	PackerDebug               *bool                         `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce               *bool                         `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError             *string                       `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars            map[string]string             `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars       []string                      `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	Type                      *string                       `mapstructure:"communicator" cty:"communicator" hcl:"communicator"`
	PauseBeforeConnect        *string                       `mapstructure:"pause_before_connecting" cty:"pause_before_connecting" hcl:"pause_before_connecting"`
	SSHHost                   *string                       `mapstructure:"ssh_host" cty:"ssh_host" hcl:"ssh_host"`
	SSHPort                   *int                          `mapstructure:"ssh_port" cty:"ssh_port" hcl:"ssh_port"`
	SSHUsername               *string                       `mapstructure:"ssh_username" cty:"ssh_username" hcl:"ssh_username"`
	SSHPassword               *string                       `mapstructure:"ssh_password" cty:"ssh_password" hcl:"ssh_password"`
	SSHKeyPairName            *string                       `mapstructure:"ssh_keypair_name" undocumented:"true" cty:"ssh_keypair_name" hcl:"ssh_keypair_name"`
	SSHTemporaryKeyPairName   *string                       `mapstructure:"temporary_key_pair_name" undocumented:"true" cty:"temporary_key_pair_name" hcl:"temporary_key_pair_name"`
	SSHTemporaryKeyPairType   *string                       `mapstructure:"temporary_key_pair_type" cty:"temporary_key_pair_type" hcl:"temporary_key_pair_type"`
	SSHTemporaryKeyPairBits   *int                          `mapstructure:"temporary_key_pair_bits" cty:"temporary_key_pair_bits" hcl:"temporary_key_pair_bits"`
	SSHCiphers                []string                      `mapstructure:"ssh_ciphers" cty:"ssh_ciphers" hcl:"ssh_ciphers"`
	SSHClearAuthorizedKeys    *bool                         `mapstructure:"ssh_clear_authorized_keys" cty:"ssh_clear_authorized_keys" hcl:"ssh_clear_authorized_keys"`
	SSHKEXAlgos               []string                      `mapstructure:"ssh_key_exchange_algorithms" cty:"ssh_key_exchange_algorithms" hcl:"ssh_key_exchange_algorithms"`
	SSHPrivateKeyFile         *string                       `mapstructure:"ssh_private_key_file" undocumented:"true" cty:"ssh_private_key_file" hcl:"ssh_private_key_file"`
	SSHCertificateFile        *string                       `mapstructure:"ssh_certificate_file" cty:"ssh_certificate_file" hcl:"ssh_certificate_file"`
	SSHPty                    *bool                         `mapstructure:"ssh_pty" cty:"ssh_pty" hcl:"ssh_pty"`
	SSHTimeout                *string                       `mapstructure:"ssh_timeout" cty:"ssh_timeout" hcl:"ssh_timeout"`
	SSHWaitTimeout            *string                       `mapstructure:"ssh_wait_timeout" undocumented:"true" cty:"ssh_wait_timeout" hcl:"ssh_wait_timeout"`
	SSHAgentAuth              *bool                         `mapstructure:"ssh_agent_auth" undocumented:"true" cty:"ssh_agent_auth" hcl:"ssh_agent_auth"`
	SSHDisableAgentForwarding *bool                         `mapstructure:"ssh_disable_agent_forwarding" cty:"ssh_disable_agent_forwarding" hcl:"ssh_disable_agent_forwarding"`
	SSHHandshakeAttempts      *int                          `mapstructure:"ssh_handshake_attempts" cty:"ssh_handshake_attempts" hcl:"ssh_handshake_attempts"`
	SSHBastionHost            *string                       `mapstructure:"ssh_bastion_host" cty:"ssh_bastion_host" hcl:"ssh_bastion_host"`
	SSHBastionPort            *int                          `mapstructure:"ssh_bastion_port" cty:"ssh_bastion_port" hcl:"ssh_bastion_port"`
	SSHBastionAgentAuth       *bool                         `mapstructure:"ssh_bastion_agent_auth" cty:"ssh_bastion_agent_auth" hcl:"ssh_bastion_agent_auth"`
	SSHBastionUsername        *string                       `mapstructure:"ssh_bastion_username" cty:"ssh_bastion_username" hcl:"ssh_bastion_username"`
	SSHBastionPassword        *string                       `mapstructure:"ssh_bastion_password" cty:"ssh_bastion_password" hcl:"ssh_bastion_password"`
	SSHBastionInteractive     *bool                         `mapstructure:"ssh_bastion_interactive" cty:"ssh_bastion_interactive" hcl:"ssh_bastion_interactive"`
	SSHBastionPrivateKeyFile  *string                       `mapstructure:"ssh_bastion_private_key_file" cty:"ssh_bastion_private_key_file" hcl:"ssh_bastion_private_key_file"`
	SSHBastionCertificateFile *string                       `mapstructure:"ssh_bastion_certificate_file" cty:"ssh_bastion_certificate_file" hcl:"ssh_bastion_certificate_file"`
	SSHFileTransferMethod     *string                       `mapstructure:"ssh_file_transfer_method" cty:"ssh_file_transfer_method" hcl:"ssh_file_transfer_method"`
	SSHProxyHost              *string                       `mapstructure:"ssh_proxy_host" cty:"ssh_proxy_host" hcl:"ssh_proxy_host"`
	SSHProxyPort              *int                          `mapstructure:"ssh_proxy_port" cty:"ssh_proxy_port" hcl:"ssh_proxy_port"`
	SSHProxyUsername          *string                       `mapstructure:"ssh_proxy_username" cty:"ssh_proxy_username" hcl:"ssh_proxy_username"`
	SSHProxyPassword          *string                       `mapstructure:"ssh_proxy_password" cty:"ssh_proxy_password" hcl:"ssh_proxy_password"`
	SSHKeepAliveInterval      *string                       `mapstructure:"ssh_keep_alive_interval" cty:"ssh_keep_alive_interval" hcl:"ssh_keep_alive_interval"`
	SSHReadWriteTimeout       *string                       `mapstructure:"ssh_read_write_timeout" cty:"ssh_read_write_timeout" hcl:"ssh_read_write_timeout"`
	SSHRemoteTunnels          []string                      `mapstructure:"ssh_remote_tunnels" cty:"ssh_remote_tunnels" hcl:"ssh_remote_tunnels"`
	SSHLocalTunnels           []string                      `mapstructure:"ssh_local_tunnels" cty:"ssh_local_tunnels" hcl:"ssh_local_tunnels"`
	SSHPublicKey              []byte                        `mapstructure:"ssh_public_key" undocumented:"true" cty:"ssh_public_key" hcl:"ssh_public_key"`
	SSHPrivateKey             []byte                        `mapstructure:"ssh_private_key" undocumented:"true" cty:"ssh_private_key" hcl:"ssh_private_key"`
	WinRMUser                 *string                       `mapstructure:"winrm_username" cty:"winrm_username" hcl:"winrm_username"`
	WinRMPassword             *string                       `mapstructure:"winrm_password" cty:"winrm_password" hcl:"winrm_password"`
	WinRMHost                 *string                       `mapstructure:"winrm_host" cty:"winrm_host" hcl:"winrm_host"`
	WinRMNoProxy              *bool                         `mapstructure:"winrm_no_proxy" cty:"winrm_no_proxy" hcl:"winrm_no_proxy"`
	WinRMPort                 *int                          `mapstructure:"winrm_port" cty:"winrm_port" hcl:"winrm_port"`
	WinRMTimeout              *string                       `mapstructure:"winrm_timeout" cty:"winrm_timeout" hcl:"winrm_timeout"`
	WinRMUseSSL               *bool                         `mapstructure:"winrm_use_ssl" cty:"winrm_use_ssl" hcl:"winrm_use_ssl"`
	WinRMInsecure             *bool                         `mapstructure:"winrm_insecure" cty:"winrm_insecure" hcl:"winrm_insecure"`
	WinRMUseNTLM              *bool                         `mapstructure:"winrm_use_ntlm" cty:"winrm_use_ntlm" hcl:"winrm_use_ntlm"`
	ProxmoxURLRaw             *string                       `mapstructure:"proxmox_url" cty:"proxmox_url" hcl:"proxmox_url"`
	SkipCertValidation        *bool                         `mapstructure:"insecure_skip_tls_verify" cty:"insecure_skip_tls_verify" hcl:"insecure_skip_tls_verify"`
	Username                  *string                       `mapstructure:"username" cty:"username" hcl:"username"`
	Password                  *string                       `mapstructure:"password" cty:"password" hcl:"password"`
	Token                     *string                       `mapstructure:"token" cty:"token" hcl:"token"`
	Node                      *string                       `mapstructure:"node" cty:"node" hcl:"node"`
	TaskTimeout               *string                       `mapstructure:"task_timeout" cty:"task_timeout" hcl:"task_timeout"`
	OsTemplate                *string                       `mapstructure:"os_template" cty:"os_template" hcl:"os_template"`
	VMID                      *int                          `mapstructure:"vm_id" cty:"vm_id" hcl:"vm_id"`
	Arch                      *string                       `mapstructure:"arch" cty:"arch" hcl:"arch"`
	BwLimit                   *int                          `mapstructure:"bw_limit" cty:"bw_limit" hcl:"bw_limit"`
	CMode                     *string                       `mapstructure:"cmode" cty:"cmode" hcl:"cmode"`
	Console                   *bool                         `mapstructure:"console" cty:"console" hcl:"console"`
	Cores                     *int                          `mapstructure:"cores" cty:"cores" hcl:"cores"`
	CpuLimit                  *int                          `mapstructure:"cpu_limit" cty:"cpu_limit" hcl:"cpu_limit"`
	CpuUnits                  *int                          `mapstructure:"cpu_units" cty:"cpu_units" hcl:"cpu_units"`
	Debug                     *bool                         `mapstructure:"debug" cty:"debug" hcl:"debug"`
	Description               *string                       `mapstructure:"description" cty:"description" hcl:"description"`
	Features                  *string                       `mapstructure:"features" cty:"features" hcl:"features"`
	Force                     *bool                         `mapstructure:"force" cty:"force" hcl:"force"`
	Hookscript                *string                       `mapstructure:"hookscript" cty:"hookscript" hcl:"hookscript"`
	Hostname                  *string                       `mapstructure:"hostname" cty:"hostname" hcl:"hostname"`
	IgnoreUnpackErrors        *bool                         `mapstructure:"ignore_unpack_errors" cty:"ignore_unpack_errors" hcl:"ignore_unpack_errors"`
	Lock                      *string                       `mapstructure:"lock" cty:"lock" hcl:"lock"`
	Memory                    *int                          `mapstructure:"memory" cty:"memory" hcl:"memory"`
	MountPoints               []FlatMountPointConfig        `mapstructure:"mount_points" cty:"mount_points" hcl:"mount_points"`
	Nameserver                *string                       `mapstructure:"nameserver" cty:"nameserver" hcl:"nameserver"`
	NetworkInterfaces         []FlatNetworkInterfacesConfig `mapstructure:"network_interfaces" cty:"network_interfaces" hcl:"network_interfaces"`
	OnBoot                    *bool                         `mapstructure:"on_boot" cty:"on_boot" hcl:"on_boot"`
	OSType                    *string                       `mapstructure:"os_type" cty:"os_type" hcl:"os_type"`
	UserPassword              *string                       `mapstructure:"user_password" cty:"user_password" hcl:"user_password"`
	Pool                      *string                       `mapstructure:"pool" cty:"pool" hcl:"pool"`
	Protection                *bool                         `mapstructure:"protection" cty:"protection" hcl:"protection"`
	Restore                   *bool                         `mapstructure:"restore" cty:"restore" hcl:"restore"`
	RootFS                    *FlatMountPointConfig         `mapstructure:"rootfs" cty:"rootfs" hcl:"rootfs"`
	SearchDomain              *string                       `mapstructure:"search_domain" cty:"search_domain" hcl:"search_domain"`
	SSHPublicKeys             *string                       `mapstructure:"ssh_public_keys" cty:"ssh_public_keys" hcl:"ssh_public_keys"`
	Start                     *bool                         `mapstructure:"start" cty:"start" hcl:"start"`
	Startup                   *string                       `mapstructure:"startup" cty:"startup" hcl:"startup"`
	Storage                   *string                       `mapstructure:"storage" cty:"storage" hcl:"storage"`
	Swap                      *int                          `mapstructure:"swap" cty:"swap" hcl:"swap"`
	Tags                      []string                      `mapstructure:"tags" cty:"tags" hcl:"tags"`
	Template                  *bool                         `mapstructure:"template" cty:"template" hcl:"template"`
	Timezone                  *string                       `mapstructure:"timezone" cty:"timezone" hcl:"timezone"`
	TTY                       *int                          `mapstructure:"tty" cty:"tty" hcl:"tty"`
	Unique                    *bool                         `mapstructure:"unique" cty:"unique" hcl:"unique"`
	Unprivileged              *bool                         `mapstructure:"unprivileged" cty:"unprivileged" hcl:"unprivileged"`
	UnusedVolumes             []string                      `mapstructure:"unused_volumes" cty:"unused_volumes" hcl:"unused_volumes"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":            &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":          &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_core_version":          &hcldec.AttrSpec{Name: "packer_core_version", Type: cty.String, Required: false},
		"packer_debug":                 &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":                 &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":              &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":        &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables":   &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"communicator":                 &hcldec.AttrSpec{Name: "communicator", Type: cty.String, Required: false},
		"pause_before_connecting":      &hcldec.AttrSpec{Name: "pause_before_connecting", Type: cty.String, Required: false},
		"ssh_host":                     &hcldec.AttrSpec{Name: "ssh_host", Type: cty.String, Required: false},
		"ssh_port":                     &hcldec.AttrSpec{Name: "ssh_port", Type: cty.Number, Required: false},
		"ssh_username":                 &hcldec.AttrSpec{Name: "ssh_username", Type: cty.String, Required: false},
		"ssh_password":                 &hcldec.AttrSpec{Name: "ssh_password", Type: cty.String, Required: false},
		"ssh_keypair_name":             &hcldec.AttrSpec{Name: "ssh_keypair_name", Type: cty.String, Required: false},
		"temporary_key_pair_name":      &hcldec.AttrSpec{Name: "temporary_key_pair_name", Type: cty.String, Required: false},
		"temporary_key_pair_type":      &hcldec.AttrSpec{Name: "temporary_key_pair_type", Type: cty.String, Required: false},
		"temporary_key_pair_bits":      &hcldec.AttrSpec{Name: "temporary_key_pair_bits", Type: cty.Number, Required: false},
		"ssh_ciphers":                  &hcldec.AttrSpec{Name: "ssh_ciphers", Type: cty.List(cty.String), Required: false},
		"ssh_clear_authorized_keys":    &hcldec.AttrSpec{Name: "ssh_clear_authorized_keys", Type: cty.Bool, Required: false},
		"ssh_key_exchange_algorithms":  &hcldec.AttrSpec{Name: "ssh_key_exchange_algorithms", Type: cty.List(cty.String), Required: false},
		"ssh_private_key_file":         &hcldec.AttrSpec{Name: "ssh_private_key_file", Type: cty.String, Required: false},
		"ssh_certificate_file":         &hcldec.AttrSpec{Name: "ssh_certificate_file", Type: cty.String, Required: false},
		"ssh_pty":                      &hcldec.AttrSpec{Name: "ssh_pty", Type: cty.Bool, Required: false},
		"ssh_timeout":                  &hcldec.AttrSpec{Name: "ssh_timeout", Type: cty.String, Required: false},
		"ssh_wait_timeout":             &hcldec.AttrSpec{Name: "ssh_wait_timeout", Type: cty.String, Required: false},
		"ssh_agent_auth":               &hcldec.AttrSpec{Name: "ssh_agent_auth", Type: cty.Bool, Required: false},
		"ssh_disable_agent_forwarding": &hcldec.AttrSpec{Name: "ssh_disable_agent_forwarding", Type: cty.Bool, Required: false},
		"ssh_handshake_attempts":       &hcldec.AttrSpec{Name: "ssh_handshake_attempts", Type: cty.Number, Required: false},
		"ssh_bastion_host":             &hcldec.AttrSpec{Name: "ssh_bastion_host", Type: cty.String, Required: false},
		"ssh_bastion_port":             &hcldec.AttrSpec{Name: "ssh_bastion_port", Type: cty.Number, Required: false},
		"ssh_bastion_agent_auth":       &hcldec.AttrSpec{Name: "ssh_bastion_agent_auth", Type: cty.Bool, Required: false},
		"ssh_bastion_username":         &hcldec.AttrSpec{Name: "ssh_bastion_username", Type: cty.String, Required: false},
		"ssh_bastion_password":         &hcldec.AttrSpec{Name: "ssh_bastion_password", Type: cty.String, Required: false},
		"ssh_bastion_interactive":      &hcldec.AttrSpec{Name: "ssh_bastion_interactive", Type: cty.Bool, Required: false},
		"ssh_bastion_private_key_file": &hcldec.AttrSpec{Name: "ssh_bastion_private_key_file", Type: cty.String, Required: false},
		"ssh_bastion_certificate_file": &hcldec.AttrSpec{Name: "ssh_bastion_certificate_file", Type: cty.String, Required: false},
		"ssh_file_transfer_method":     &hcldec.AttrSpec{Name: "ssh_file_transfer_method", Type: cty.String, Required: false},
		"ssh_proxy_host":               &hcldec.AttrSpec{Name: "ssh_proxy_host", Type: cty.String, Required: false},
		"ssh_proxy_port":               &hcldec.AttrSpec{Name: "ssh_proxy_port", Type: cty.Number, Required: false},
		"ssh_proxy_username":           &hcldec.AttrSpec{Name: "ssh_proxy_username", Type: cty.String, Required: false},
		"ssh_proxy_password":           &hcldec.AttrSpec{Name: "ssh_proxy_password", Type: cty.String, Required: false},
		"ssh_keep_alive_interval":      &hcldec.AttrSpec{Name: "ssh_keep_alive_interval", Type: cty.String, Required: false},
		"ssh_read_write_timeout":       &hcldec.AttrSpec{Name: "ssh_read_write_timeout", Type: cty.String, Required: false},
		"ssh_remote_tunnels":           &hcldec.AttrSpec{Name: "ssh_remote_tunnels", Type: cty.List(cty.String), Required: false},
		"ssh_local_tunnels":            &hcldec.AttrSpec{Name: "ssh_local_tunnels", Type: cty.List(cty.String), Required: false},
		"ssh_public_key":               &hcldec.AttrSpec{Name: "ssh_public_key", Type: cty.List(cty.Number), Required: false},
		"ssh_private_key":              &hcldec.AttrSpec{Name: "ssh_private_key", Type: cty.List(cty.Number), Required: false},
		"winrm_username":               &hcldec.AttrSpec{Name: "winrm_username", Type: cty.String, Required: false},
		"winrm_password":               &hcldec.AttrSpec{Name: "winrm_password", Type: cty.String, Required: false},
		"winrm_host":                   &hcldec.AttrSpec{Name: "winrm_host", Type: cty.String, Required: false},
		"winrm_no_proxy":               &hcldec.AttrSpec{Name: "winrm_no_proxy", Type: cty.Bool, Required: false},
		"winrm_port":                   &hcldec.AttrSpec{Name: "winrm_port", Type: cty.Number, Required: false},
		"winrm_timeout":                &hcldec.AttrSpec{Name: "winrm_timeout", Type: cty.String, Required: false},
		"winrm_use_ssl":                &hcldec.AttrSpec{Name: "winrm_use_ssl", Type: cty.Bool, Required: false},
		"winrm_insecure":               &hcldec.AttrSpec{Name: "winrm_insecure", Type: cty.Bool, Required: false},
		"winrm_use_ntlm":               &hcldec.AttrSpec{Name: "winrm_use_ntlm", Type: cty.Bool, Required: false},
		"proxmox_url":                  &hcldec.AttrSpec{Name: "proxmox_url", Type: cty.String, Required: false},
		"insecure_skip_tls_verify":     &hcldec.AttrSpec{Name: "insecure_skip_tls_verify", Type: cty.Bool, Required: false},
		"username":                     &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"password":                     &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"token":                        &hcldec.AttrSpec{Name: "token", Type: cty.String, Required: false},
		"node":                         &hcldec.AttrSpec{Name: "node", Type: cty.String, Required: false},
		"task_timeout":                 &hcldec.AttrSpec{Name: "task_timeout", Type: cty.String, Required: false},
		"os_template":                  &hcldec.AttrSpec{Name: "os_template", Type: cty.String, Required: false},
		"vm_id":                        &hcldec.AttrSpec{Name: "vm_id", Type: cty.Number, Required: false},
		"arch":                         &hcldec.AttrSpec{Name: "arch", Type: cty.String, Required: false},
		"bw_limit":                     &hcldec.AttrSpec{Name: "bw_limit", Type: cty.Number, Required: false},
		"cmode":                        &hcldec.AttrSpec{Name: "cmode", Type: cty.String, Required: false},
		"console":                      &hcldec.AttrSpec{Name: "console", Type: cty.Bool, Required: false},
		"cores":                        &hcldec.AttrSpec{Name: "cores", Type: cty.Number, Required: false},
		"cpu_limit":                    &hcldec.AttrSpec{Name: "cpu_limit", Type: cty.Number, Required: false},
		"cpu_units":                    &hcldec.AttrSpec{Name: "cpu_units", Type: cty.Number, Required: false},
		"debug":                        &hcldec.AttrSpec{Name: "debug", Type: cty.Bool, Required: false},
		"description":                  &hcldec.AttrSpec{Name: "description", Type: cty.String, Required: false},
		"features":                     &hcldec.AttrSpec{Name: "features", Type: cty.String, Required: false},
		"force":                        &hcldec.AttrSpec{Name: "force", Type: cty.Bool, Required: false},
		"hookscript":                   &hcldec.AttrSpec{Name: "hookscript", Type: cty.String, Required: false},
		"hostname":                     &hcldec.AttrSpec{Name: "hostname", Type: cty.String, Required: false},
		"ignore_unpack_errors":         &hcldec.AttrSpec{Name: "ignore_unpack_errors", Type: cty.Bool, Required: false},
		"lock":                         &hcldec.AttrSpec{Name: "lock", Type: cty.String, Required: false},
		"memory":                       &hcldec.AttrSpec{Name: "memory", Type: cty.Number, Required: false},
		"mount_points":                 &hcldec.BlockListSpec{TypeName: "mount_points", Nested: hcldec.ObjectSpec((*FlatMountPointConfig)(nil).HCL2Spec())},
		"nameserver":                   &hcldec.AttrSpec{Name: "nameserver", Type: cty.String, Required: false},
		"network_interfaces":           &hcldec.BlockListSpec{TypeName: "network_interfaces", Nested: hcldec.ObjectSpec((*FlatNetworkInterfacesConfig)(nil).HCL2Spec())},
		"on_boot":                      &hcldec.AttrSpec{Name: "on_boot", Type: cty.Bool, Required: false},
		"os_type":                      &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"user_password":                &hcldec.AttrSpec{Name: "user_password", Type: cty.String, Required: false},
		"pool":                         &hcldec.AttrSpec{Name: "pool", Type: cty.String, Required: false},
		"protection":                   &hcldec.AttrSpec{Name: "protection", Type: cty.Bool, Required: false},
		"restore":                      &hcldec.AttrSpec{Name: "restore", Type: cty.Bool, Required: false},
		"rootfs":                       &hcldec.BlockSpec{TypeName: "rootfs", Nested: hcldec.ObjectSpec((*FlatMountPointConfig)(nil).HCL2Spec())},
		"search_domain":                &hcldec.AttrSpec{Name: "search_domain", Type: cty.String, Required: false},
		"ssh_public_keys":              &hcldec.AttrSpec{Name: "ssh_public_keys", Type: cty.String, Required: false},
		"start":                        &hcldec.AttrSpec{Name: "start", Type: cty.Bool, Required: false},
		"startup":                      &hcldec.AttrSpec{Name: "startup", Type: cty.String, Required: false},
		"storage":                      &hcldec.AttrSpec{Name: "storage", Type: cty.String, Required: false},
		"swap":                         &hcldec.AttrSpec{Name: "swap", Type: cty.Number, Required: false},
		"tags":                         &hcldec.AttrSpec{Name: "tags", Type: cty.List(cty.String), Required: false},
		"template":                     &hcldec.AttrSpec{Name: "template", Type: cty.Bool, Required: false},
		"timezone":                     &hcldec.AttrSpec{Name: "timezone", Type: cty.String, Required: false},
		"tty":                          &hcldec.AttrSpec{Name: "tty", Type: cty.Number, Required: false},
		"unique":                       &hcldec.AttrSpec{Name: "unique", Type: cty.Bool, Required: false},
		"unprivileged":                 &hcldec.AttrSpec{Name: "unprivileged", Type: cty.Bool, Required: false},
		"unused_volumes":               &hcldec.AttrSpec{Name: "unused_volumes", Type: cty.List(cty.String), Required: false},
	}
	return s
}

// FlatMountPointConfig is an auto-generated flat version of MountPointConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatMountPointConfig struct {
	StorageId    *string                `mapstructure:"storage_id" cty:"storage_id" hcl:"storage_id"`
	Volume       *string                `mapstructure:"volume" cty:"volume" hcl:"volume"`
	Path         *string                `mapstructure:"path" cty:"path" hcl:"path"`
	ACL          *bool                  `mapstructure:"acl" cty:"acl" hcl:"acl"`
	Backup       *bool                  `mapstructure:"backup" cty:"backup" hcl:"backup"`
	MountOptions map[string]interface{} `mapstructure:"mount_options" cty:"mount_options" hcl:"mount_options"`
	Quota        *bool                  `mapstructure:"quota" cty:"quota" hcl:"quota"`
	Replicate    *bool                  `mapstructure:"replicate" cty:"replicate" hcl:"replicate"`
	ReadOnly     *bool                  `mapstructure:"readonly" cty:"readonly" hcl:"readonly"`
	Shared       *bool                  `mapstructure:"shared" cty:"shared" hcl:"shared"`
	DiskSize     *string                `mapstructure:"disk_size" cty:"disk_size" hcl:"disk_size"`
}

// FlatMapstructure returns a new FlatMountPointConfig.
// FlatMountPointConfig is an auto-generated flat version of MountPointConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*MountPointConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatMountPointConfig)
}

// HCL2Spec returns the hcl spec of a MountPointConfig.
// This spec is used by HCL to read the fields of MountPointConfig.
// The decoded values from this spec will then be applied to a FlatMountPointConfig.
func (*FlatMountPointConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"storage_id":    &hcldec.AttrSpec{Name: "storage_id", Type: cty.String, Required: false},
		"volume":        &hcldec.AttrSpec{Name: "volume", Type: cty.String, Required: false},
		"path":          &hcldec.AttrSpec{Name: "path", Type: cty.String, Required: false},
		"acl":           &hcldec.AttrSpec{Name: "acl", Type: cty.Bool, Required: false},
		"backup":        &hcldec.AttrSpec{Name: "backup", Type: cty.Bool, Required: false},
		"mount_options": &hcldec.AttrSpec{Name: "mount_options", Type: cty.Map(cty.String), Required: false},
		"quota":         &hcldec.AttrSpec{Name: "quota", Type: cty.Bool, Required: false},
		"replicate":     &hcldec.AttrSpec{Name: "replicate", Type: cty.Bool, Required: false},
		"readonly":      &hcldec.AttrSpec{Name: "readonly", Type: cty.Bool, Required: false},
		"shared":        &hcldec.AttrSpec{Name: "shared", Type: cty.Bool, Required: false},
		"disk_size":     &hcldec.AttrSpec{Name: "disk_size", Type: cty.String, Required: false},
	}
	return s
}

// FlatNetworkInterfacesConfig is an auto-generated flat version of NetworkInterfacesConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatNetworkInterfacesConfig struct {
	Name        *string  `mapstructure:"name" cty:"name" hcl:"name"`
	Bridge      *string  `mapstructure:"bridge" cty:"bridge" hcl:"bridge"`
	Firewall    *bool    `mapstructure:"firewall" cty:"firewall" hcl:"firewall"`
	GatewayIPv4 *string  `mapstructure:"gateway_ipv4" cty:"gateway_ipv4" hcl:"gateway_ipv4"`
	GatewayIPv6 *string  `mapstructure:"gateway_ipv6" cty:"gateway_ipv6" hcl:"gateway_ipv6"`
	MACAddress  *string  `mapstructure:"mac_address" cty:"mac_address" hcl:"mac_address"`
	IPv4Address *string  `mapstructure:"ipv4_address" cty:"ipv4_address" hcl:"ipv4_address"`
	IPv6Address *string  `mapstructure:"ipv6_address" cty:"ipv6_address" hcl:"ipv6_address"`
	LinkDown    *bool    `mapstructure:"link_down" cty:"link_down" hcl:"link_down"`
	MTU         *int     `mapstructure:"mtu" cty:"mtu" hcl:"mtu"`
	RateMbps    *int     `mapstructure:"rate_mbps" cty:"rate_mbps" hcl:"rate_mbps"`
	Tag         *int     `mapstructure:"tag" cty:"tag" hcl:"tag"`
	Trunks      []string `mapstructure:"trunks" cty:"trunks" hcl:"trunks"`
	Type        *string  `mapstructure:"type" cty:"type" hcl:"type"`
}

// FlatMapstructure returns a new FlatNetworkInterfacesConfig.
// FlatNetworkInterfacesConfig is an auto-generated flat version of NetworkInterfacesConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*NetworkInterfacesConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatNetworkInterfacesConfig)
}

// HCL2Spec returns the hcl spec of a NetworkInterfacesConfig.
// This spec is used by HCL to read the fields of NetworkInterfacesConfig.
// The decoded values from this spec will then be applied to a FlatNetworkInterfacesConfig.
func (*FlatNetworkInterfacesConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":         &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"bridge":       &hcldec.AttrSpec{Name: "bridge", Type: cty.String, Required: false},
		"firewall":     &hcldec.AttrSpec{Name: "firewall", Type: cty.Bool, Required: false},
		"gateway_ipv4": &hcldec.AttrSpec{Name: "gateway_ipv4", Type: cty.String, Required: false},
		"gateway_ipv6": &hcldec.AttrSpec{Name: "gateway_ipv6", Type: cty.String, Required: false},
		"mac_address":  &hcldec.AttrSpec{Name: "mac_address", Type: cty.String, Required: false},
		"ipv4_address": &hcldec.AttrSpec{Name: "ipv4_address", Type: cty.String, Required: false},
		"ipv6_address": &hcldec.AttrSpec{Name: "ipv6_address", Type: cty.String, Required: false},
		"link_down":    &hcldec.AttrSpec{Name: "link_down", Type: cty.Bool, Required: false},
		"mtu":          &hcldec.AttrSpec{Name: "mtu", Type: cty.Number, Required: false},
		"rate_mbps":    &hcldec.AttrSpec{Name: "rate_mbps", Type: cty.Number, Required: false},
		"tag":          &hcldec.AttrSpec{Name: "tag", Type: cty.Number, Required: false},
		"trunks":       &hcldec.AttrSpec{Name: "trunks", Type: cty.List(cty.String), Required: false},
		"type":         &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
	}
	return s
}
